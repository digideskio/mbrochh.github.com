<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>martinbrochhaus.com</title><link href="http://www.martinbrochhaus.com/" rel="alternate"></link><link href="http://www.martinbrochhaus.com/feeds/all-en.atom.xml" rel="self"></link><id>http://www.martinbrochhaus.com/</id><updated>2012-04-21T00:00:00+08:00</updated><entry><title>Snippets of April 2012</title><link href="http://www.martinbrochhaus.com/2012/04/snippets-201204.html" rel="alternate"></link><updated>2012-04-21T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:www.martinbrochhaus.com,2012-04-21:2012/04/snippets-201204.html</id><summary type="html">&lt;p&gt;This is my second post in a series of (almost) monthly posts about small bits
and pieces of wisdom that amazed me. You can find the first post here:
&lt;a href="http://martinbrochhaus.com/2012/02/snippets-201202.html"&gt;Snippets of February 2012&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Ubuntu: Static Application Switcher&lt;/h1&gt;
&lt;p&gt;App switiching with ALT+TAB became a major pain since Ubuntu introduced that
horrible Unity interface. The simple solution is to open CompizConfig Settings
Manager and enable "Static Application Switcher" under "Window Management".&lt;/p&gt;
&lt;p&gt;I think it is much much more intuitive and effective to have a static list of
windows instead of an endlessly rotating one.&lt;/p&gt;
&lt;h1&gt;Scrolling and Copy &amp;amp; Paste in GNU Screen&lt;/h1&gt;
&lt;p&gt;I really got to love screen during the past 4 months and usually work in a
session with 7 windows open. The problem is, when I swtich to window 1 to see
the output of my tests and there is a huge traceback, I cannot use my terminal
to scroll up because I will scroll into whatever I saw in the windows before
(probably Vim).&lt;/p&gt;
&lt;p&gt;The trick is to use Screen's scroll mode by pressing &lt;code&gt;CTRL+A ESC&lt;/code&gt;. It will
display a message saying that copy mode is activated and now you can move the
cursor with the usual Vim keybindings. Pressing &lt;code&gt;SPACE&lt;/code&gt; or &lt;code&gt;ENTER&lt;/code&gt; once
sets a marker and pressing it again will copy everything between the first and
second marker into the clipboard.&lt;/p&gt;
&lt;p&gt;You can paste the clipboard via &lt;code&gt;CTRL+A ]&lt;/code&gt;. Yea, I know. Read the fucking
manual... :)&lt;/p&gt;
&lt;h1&gt;SSH Keep Alive&lt;/h1&gt;
&lt;p&gt;Whenever I need to SSH into my various servers I get connection timeouts all
the time. Somehow most people don't suffer from this so this seems to be a
problem with my Ubuntu installation, but recently I found a solution that works
for me:&lt;/p&gt;
&lt;p&gt;On my servers, I now set this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# in ~/.ssh/config:
ServerAliveInterval 60

# in ~/.screenrc
caption always &amp;#39;%c:%s&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I just need to remember to start a screen session right after I login. The
screen setting will render a clock at the bottom of the screen which is enough
to have a steady bit of traffic going through SSH for not kicking me out of the
server any more.&lt;/p&gt;
&lt;h1&gt;Nerdy IT Jargon&lt;/h1&gt;
&lt;p&gt;I can't remember where I learned about these but I love them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is called the spaceship operator&lt;/li&gt;
&lt;li&gt;Writing variable names &lt;code&gt;LikeThis&lt;/code&gt; is called CamelCase. I knew this for
  years, but:&lt;/li&gt;
&lt;li&gt;Writing variable names &lt;code&gt;like_this&lt;/code&gt; is called &lt;code&gt;snake_case&lt;/code&gt;. Very Pythonic,
  isn't it?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;HG Facepalm&lt;/h1&gt;
&lt;p&gt;I can't believe that this actually happened, but if you have something from
Bitbucket in your requirements.txt and try to pip install it, you might get
a weird error saying that the pip call to Bitbucket returned code 1 and this
pip stops installing.&lt;/p&gt;
&lt;p&gt;This is because a recent version of Mercurial returns 1 if &lt;code&gt;hg pull&lt;/code&gt; doesn't
return any new changes (which happens most of the time).&lt;/p&gt;
&lt;p&gt;However, pip (and almost every other software on this planet) thinks that a
return value of 1 means a failure and just stops.&lt;/p&gt;
&lt;p&gt;Thankfully Mercurial fixed this quickly and reverted that change, so if you are
suffering from the "bad" version, you might want to upgrade your Mercurial
installation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mercurial.selenic.com/wiki/UpgradeNotes"&gt;Mercurial upgrade notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pip/issues/454"&gt;Relevant GitHub issue for pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Great blog posts&lt;/h1&gt;
&lt;p&gt;I currently have 190 subsriptions in Google Reader and I am following 298
awesome people on Twitter. These lists are carefully curated by myself and I
usually enjoy reading almost everything that comes in through those streams.
Here are some posts that, to me, should be spread as far as possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.dailygood.org/view.php?sid=194"&gt;9 Essential Skills Kids Should Learn&lt;/a&gt;
  The longer I work on my own company Bitmazk Pte. Ltd. the more I realize that
  (at least in the IT business) traditional education is completely worthless.
  I have the feeling that I will put in quite some effort to educate my own
  kids in a very different way than I was educated myself. This post gives some
  very very nice ideas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.stumbleupon.com/su/9IbGnD/zenhabits.net/the-only-guide-to-happiness-youll-ever-need/"&gt;The Only Guide to Happiness Youâ€™ll Ever Need&lt;/a&gt;
  The title says it all. After reading "Mindfulness in Plain English" several
  times, the pursuit of hapiness has become a very important part of my life
  that I try to consciously improve day after day. I've surely not mastered
  this aspect of my life but I can tell that this list nails it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://carl.flax.ie/dothingstellpeople.html"&gt;Do things, tell people&lt;/a&gt;
  This. Absolutely true. Whenever I did something in the open, no matter how
  small, lame or unimportant, an incredible chain of events unfolded itself
  in front of me that enriched my life in ways that I can't put into words.
  Please! If you have a little bit of energy left at the end of your day, get
  your ass up, do things, and tell people!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://steve-yegge.blogspot.com/2006/09/good-agile-bad-agile_27.html"&gt;Good Agile, Bad Agile&lt;/a&gt;
  It sad but true: This whole Scrumm and Agile movement is a big scam. This
  rant explains why. Thought provoking read.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="snippets"></category><category term="ubuntu"></category><category term="screen"></category><category term="ssh"></category><category term="mercurial"></category><category term="self growth"></category></entry><entry><title>MySQL InnoDB vs. MyISAM and the foreign key constraint of death</title><link href="http://www.martinbrochhaus.com/2012/03/myisam-vs-innodb.md.html" rel="alternate"></link><updated>2012-03-18T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:www.martinbrochhaus.com,2012-03-18:2012/03/myisam-vs-innodb.md.html</id><summary type="html">&lt;p&gt;During the last few months I constantly ran into problems with MySQL which
drove me crazy and I finally decided to use PostgreSQL for all new projects.
Today I figured out what was going on:&lt;/p&gt;
&lt;p&gt;On my development machine I have MySQL version 5.1.61 installed. Recent
Webfaction servers however ship with MySQL version 5.5.16. I think, the newer
version creates new tables with the much better engine InnoDB while my older
version defaults to MyISAM.&lt;/p&gt;
&lt;p&gt;I was developing a big Django project in a highly agile way during the last
few months and my workflow looked roughly like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write tests&lt;/li&gt;
&lt;li&gt;Create fixtures&lt;/li&gt;
&lt;li&gt;Implement feature&lt;/li&gt;
&lt;li&gt;Rebuild database with the new fixtures&lt;/li&gt;
&lt;li&gt;Deploy feature at Webfaction&lt;/li&gt;
&lt;li&gt;Export local database&lt;/li&gt;
&lt;li&gt;Import local database on Webfacion server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means for the last few months my customer and me were testing the app with
testdata only (which looked very close to the real data anyways). However, this
month the app matured enough so that I stopped importing my local database into
the Webfaction server. From now on I would create South migrations and deploy
them as usual.&lt;/p&gt;
&lt;p&gt;Yesterday I created a new app within the project. The model of that app had a
foreign key to a model of one of the older apps. I'm sure you already know what
comes now: Because I used to import my local database into the Webfaction
server for many months, all tables had the old MyISAM engine. When I deployed
my latest feature last night and ran the South migrations everything worked
fine but when I tested the app in a browser, I got the foreign key constraint
error or death.&lt;/p&gt;
&lt;p&gt;So I imported the server's datbase locally and asked some stupid questions in
the #mysql channel. A friendly user named &lt;code&gt;salle&lt;/code&gt; answered within a second
and I learned about a cool SQL command which I never needed before:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This shows, among many other informatoin, which engine each of your tables has
and at the first glance I could see that the newly created tables that came
with the South migration on the server had a different engine than all the
rest.&lt;/p&gt;
&lt;p&gt;Another stupid question later I learned that I can convert the tables to the
other engine by simply executing:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I converted all MyISAM tables into InnoDB tables and all was good. I should
definitely update my local MySQL installation...&lt;/p&gt;</summary><category term="databases"></category><category term="mysql"></category><category term="django"></category></entry><entry><title>Snippets of February 2012</title><link href="http://www.martinbrochhaus.com/2012/02/snippets-201202.html" rel="alternate"></link><updated>2012-02-29T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:www.martinbrochhaus.com,2012-02-29:2012/02/snippets-201202.html</id><summary type="html">&lt;p&gt;Naturally, as a developer I learn new awesome things almost every day.
I thought it might be a good idea to keep track of all those small Ah-Ha!
moments and release a snippets post every month.&lt;/p&gt;
&lt;h1&gt;Global .gitignore&lt;/h1&gt;
&lt;p&gt;When I wanted to contribute code to
&lt;a href="https://github.com/ametaireau/pelican"&gt;Pelican&lt;/a&gt; I naively added
&lt;code&gt;.ropeproject&lt;/code&gt; to that repo's &lt;code&gt;.gitignore&lt;/code&gt; file. As a result, I was told in
the codereview that I should not pollute other project's &lt;code&gt;.gitignore&lt;/code&gt; files
with unrelated stuff but rather use a global &lt;code&gt;.gitignore&lt;/code&gt; file instead. How
could I not know about this until now?!?&lt;/p&gt;
&lt;p&gt;Just add the following code to your .gitconfig:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[core]
excludesfile = $HOME/.gitignore_global
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create the &lt;code&gt;.gitignore_global&lt;/code&gt; file and put stuff inside that your
editors of choice might produce.&lt;/p&gt;
&lt;h1&gt;Better Omni Completion in Vim&lt;/h1&gt;
&lt;p&gt;So I finally got the &lt;code&gt;hjkl&lt;/code&gt; keys for movement into my muscle memory. Now it
annoys me that I have to use the arrow keys when I want to browse through the
various options that the code completion suggests. There is a vimbit for that:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;set completeopt=longest,menuone

&amp;quot; found here: http://stackoverflow.com/a/2170800/70778
function! OmniPopup(action)
    if pumvisible()
        if a:action == &amp;#39;j&amp;#39;
            return &amp;quot;\&amp;lt;C-N&amp;gt;&amp;quot;
        elseif a:action == &amp;#39;k&amp;#39;
            return &amp;quot;\&amp;lt;C-P&amp;gt;&amp;quot;
        endif
    endif
    return a:action
endfunction
inoremap &amp;lt;silent&amp;gt;&amp;lt;C-j&amp;gt; &amp;lt;C-R&amp;gt;=OmniPopup(&amp;#39;j&amp;#39;)&amp;lt;CR&amp;gt;
inoremap &amp;lt;silent&amp;gt;&amp;lt;C-k&amp;gt; &amp;lt;C-R&amp;gt;=OmniPopup(&amp;#39;k&amp;#39;)&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Vimbits&lt;/h1&gt;
&lt;p&gt;Speaking of vimbits: &lt;a href="http://vimbits.com/"&gt;vimbits.com&lt;/a&gt; recently flew through
my Twitter stream. I spent an hour there. As a result my &lt;code&gt;.vimrc&lt;/code&gt; just
exploded with all kinds of awesomeness.&lt;/p&gt;
&lt;h1&gt;Showing git branch in prompt&lt;/h1&gt;
&lt;p&gt;I thought that I was typing &lt;code&gt;git branch&lt;/code&gt; way too often (actually I type
&lt;code&gt;git br&lt;/code&gt;, of course).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;export PS1=&amp;#39;\w\[\033[31m\]$(__git_ps1 &amp;quot;(%s)&amp;quot;) \[\033[01;34m\]$\[\033[00m\] &amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hint: In order for this to work, you need to install git via Homebrew on OSX.&lt;/p&gt;</summary><category term="git"></category><category term="python"></category><category term="vim"></category><category term="snippets"></category></entry><entry><title>Blogging with Pelican and GitHub</title><link href="http://www.martinbrochhaus.com/2012/02/pelican.html" rel="alternate"></link><updated>2012-02-20T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:www.martinbrochhaus.com,2012-02-20:2012/02/pelican.html</id><summary type="html">&lt;p&gt;While it took me indeed just four lines of code and thirty minutes to setup the
first version of this blog, I couldn't resist to geek over it for a few more
hours and create a nice and clean approach to publishing this blog with
&lt;a href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt;,
&lt;a href="https://github.com/ametaireau/pelican"&gt;Pelican&lt;/a&gt; and
&lt;a href="http://github.com"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What to expect&lt;/h1&gt;
&lt;p&gt;When you follow these instructions, you can expect the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A simple static blog website with a simple yet beautiful theme.&lt;/li&gt;
&lt;li&gt;Possibility to change any aspect of the site as you wish.&lt;/li&gt;
&lt;li&gt;Writing your blog posts in the editor of your choice with
  &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All your content is under version control on GitHub. This means that people
  can send you pull requests and suggest improvements to your posts, which is
  just awesome.&lt;/li&gt;
&lt;li&gt;Publishing your posts by simply calling &lt;code&gt;fab publish:'Commit message'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Free hosting on GitHub. I guess you don't need to worry to make it to the
  front page of &lt;a href="http://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I should mention that Pelican is a Python project and therefore it wouldn't
hurt if you knew a bit about Pyhton. I will assume basic Python knowledge here.
Let's get started:&lt;/p&gt;
&lt;h1&gt;Activate GitHub Pages&lt;/h1&gt;
&lt;p&gt;Just create a new repository called &lt;code&gt;username.github.com&lt;/code&gt;. Whatever you place
in here will be served at &lt;code&gt;http://username.github.com&lt;/code&gt;. For more information
please see the &lt;a href="http://pages.github.com/"&gt;GitHub Pages Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Setup your repository&lt;/h1&gt;
&lt;p&gt;First create a folder on your disk for the new project:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir &lt;span class="nv"&gt;$HOME&lt;/span&gt;/Projects/myblog
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/Projects/myblog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next setup your &lt;code&gt;source&lt;/code&gt; folder. This is the folder where you will write your
articles and call pelican to generate your static html output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;cd source&lt;/span&gt;

&lt;span class="c"&gt;# We will steal some files from my own repo here:&lt;/span&gt;
wget https://github.com/mbrochh/mbrochh.github.com/raw/master/source/requirements.txt
wget https://github.com/mbrochh/mbrochh.github.com/raw/master/source/fabfile.py
wget https://github.com/mbrochh/mbrochh.github.com/raw/master/source/settings.py.sample settings.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The sample &lt;code&gt;settings.py&lt;/code&gt; you just got from my own repo will need some changes
now. Have a look at it and edit it so that it fits your needs.&lt;/p&gt;
&lt;h1&gt;Setup your virtualenv&lt;/h1&gt;
&lt;p&gt;If you have never used virtualenv and virtualenvwrapper before, now is the
time to learn about it. Usually this is what you need to do to install it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;sudo easy_install pip
sudo pip install virtualenv
sudo pip install virtualenvwrapper
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Envs
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh
&lt;span class="c"&gt;# also add export WORKON_HOME=~/Envs to your .bashrc file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will use virtualenv to install fabric and pelican:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkvirtualenv -p python2.7 blog
workon blog
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Create your first post&lt;/h1&gt;
&lt;p&gt;Now is the time to create your first post:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make sure to be in the source/ folder&lt;/span&gt;
mkdir -p posts/2012/02/  &lt;span class="c"&gt;# insert appropriate year and month here&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;posts/2012/02/
touch hello-world.md
nano hello-world.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To learn more about how to write your articles with Markdown or
reStructuredText for Pelican, have a look at
&lt;a href="http://pelican.notmyidea.org/en/latest/getting_started.html#writing-articles-using-pelican"&gt;writing articles using pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your article should look similar to this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Date: 2012-02-20
Title: Hello world
Category: Blog
Tags: blogging, test

Lorem ipsum
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I like to create meaningful commit messages for the edits of my &lt;code&gt;.md&lt;/code&gt; files and
separate them from the changes that the Pelican output generates, therefore now
it is a good time to create a commit:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git add .
git commit -am &lt;span class="s2"&gt;&amp;quot;Created my first post.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Publish your first post&lt;/h1&gt;
&lt;p&gt;This is the interesting part! You will use Pelican now to generate the output
for your blog:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make sure to be in the source/ folder&lt;/span&gt;
pelican . -o ../ -s settings.py
git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you run &lt;code&gt;git status&lt;/code&gt; you will see that Pelican generated a whole bunch
of files in your root directory. Open your &lt;code&gt;index.html&lt;/code&gt; and have a look at
your new blog.&lt;/p&gt;
&lt;p&gt;If you see that something went wrong, you might want to destroy the generated
output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
# &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;
# &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;committed&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can edit your &lt;code&gt;.md&lt;/code&gt; files again and generate the output again. If you
are happy with your output, it is time to publish it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
# &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&amp;quot;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Publishing with fabric&lt;/h1&gt;
&lt;p&gt;As you have seen, the workflow of editing your posts is always the same. First
you edit your &lt;code&gt;.md&lt;/code&gt; files, next you commit your changes and give a meaningful
commit message and at last you generate the output and commit it with a
standard commit message. Finally you push to Github which will make your
changes visible.&lt;/p&gt;
&lt;p&gt;To make this workflow easier, I have created a little Fabric script. Now you
can just edit your &lt;code&gt;.md&lt;/code&gt; files and once you are done, call Fabric:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;fab publish:&lt;span class="s1"&gt;&amp;#39;My commit message&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Setting up a custom domain&lt;/h1&gt;
&lt;p&gt;As if all this isn't awesome enough, GitHub makes it really easy to create
custom domains for your GitHub page. All you need is to place a file called
&lt;code&gt;CNAME&lt;/code&gt; in the root of your project and add the following content:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;yourdomain.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then point the A record of your domain to the IP address of GitHub. For more
information have a look at the instructions about
&lt;a href="http://pages.github.com/#custom_domains"&gt;custom domains on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;How to embed images?&lt;/h1&gt;
&lt;p&gt;If you need to embed images, you can just add them to the folder
&lt;code&gt;source/images/&lt;/code&gt; and link to them in your &lt;code&gt;.md&lt;/code&gt; files like so:
&lt;code&gt;![Alt text](./static/images/yourimage.png)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Thanks!&lt;/h1&gt;
&lt;p&gt;That's it. I hope I didn't forget anything. I would like to thank
&lt;a href="https://twitter.com/ametaireau"&gt;Alexis Metaireau&lt;/a&gt; for the great work on
Pelican. There is a small and friendly group sitting at #pelican on Freenode
and while I was writing this post, I submitted a pull request to Pelican which
got merged almost immediately. The project is really worth a closer look!&lt;/p&gt;</summary><category term="blogging"></category><category term="python"></category></entry><entry><title>My next approach to blogging. Again.</title><link href="http://www.martinbrochhaus.com/2012/02/blogging.html" rel="alternate"></link><updated>2012-02-19T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:www.martinbrochhaus.com,2012-02-19:2012/02/blogging.html</id><summary type="html">&lt;p&gt;I'm a netizen since 1996 or so and I think I have accounts for all major
blogging services that ever popped into existence. Yet I'm quite sure that I
have never managed to publish stuff on a regular basis or even build an
audience. This is a shame. If you know tricks to overcome this laziness, please
let me know in the comments!&lt;/p&gt;
&lt;p&gt;I think there are two reasons for this:&lt;/p&gt;
&lt;h1&gt;1. I suck at writing&lt;/h1&gt;
&lt;p&gt;Writing meaningful content feels like a chore to me. One problem is that I am
not a native English speaker yet for the topics I would like to write about I
expect an English speaking audience. I guess this is just a matter of
training and self growth, so this should be a problem that can be overcome.&lt;/p&gt;
&lt;h1&gt;2. Technology moves too fast&lt;/h1&gt;
&lt;p&gt;In the past I have created numerous accounts at worpress.com, blogger.com,
tumblr.com. While setting up those blogs is a piece of cake, I always felt
uneasy about locking-in all this content into one service. Yes, yes, there
are probably export and import tools that should help you to get your data in
and out of all those blogging platforms but I am quite sure that migrating a
whole blog from one service to the other will result in major pain. And
let's face it. Every year or so a new hot service (like tumblr) pops up and
makes you constantly wonder if you should move on.&lt;/p&gt;
&lt;p&gt;So I did the next obvious thing and hosted my own Wordpress instances on
Webfaction servers. While they run smoothly and fast most of the time I am
pretty sure that I would never be able to survive a slashdot effect. Besides
that, I know enough about software to not be so naive to think that you are
done when you ran the installer of Wordpress and see the initial setup. I
would fix various security issues like changing the prefix for the database
tables, the URL for the admin login, the name of the admin user and whatnot.
I would spend a day or two on optimizing my Apache settings and the .htaccess
file, even more on finding and optimizing a good theme and on installing
more than a dozen plugins. Instead of writing articles I would constantly
come back and make small improvements to the setup here and there and make
sure that everything stays up to date.&lt;/p&gt;
&lt;p&gt;And then, just when you think that you have the perfect setup, smartphones
and tablets take over the world and you realize that you need to get a new
theme that is optimized for mobile agents and the whole trouble starts over
again.&lt;/p&gt;
&lt;p&gt;Hosting Wordpress is just painful and definitely not fun. When you do
something in your spare time it should always be fun.&lt;/p&gt;
&lt;h1&gt;What I want&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I want to be able to write my articles in Vim&lt;/li&gt;
&lt;li&gt;I want to write my posts in Markdown.&lt;/li&gt;
&lt;li&gt;I want to be able to put my articles under version control.&lt;/li&gt;
&lt;li&gt;I don't want to think about hosting and scaling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few weeks ago I discovered two services, &lt;a href="http://www.calepin.co"&gt;calepin.co&lt;/a&gt;
and &lt;a href="http://www.scriptogr.am"&gt;scriptogr.am&lt;/a&gt; which looked very promising and
very close to my needs. Unfortunately the creator of calepin.co has some
strange opinions about the future of publishing and therefore keeps the service
way too minimalistic. While scriptogr.am looks like a very decent service, the
only problem here is that you have to host your stuff on Dropbox. While this
somehow meets my requirements of version control, I would prefer &lt;em&gt;real&lt;/em&gt; version
control on Github.&lt;/p&gt;
&lt;p&gt;Thankfully out of a sudden &lt;a href="https://twitter.com/#!/pydanny/status/171102804574875648"&gt;Daniel
Greenfeld&lt;/a&gt; posted
about his Pelican powered blog on Github. Luckily he included a first blog post
which describes how to setup a similar blog with just four simple lines of
code.&lt;/p&gt;
&lt;p&gt;I was hooked. So I set up this blog in an hour or so. Let's see if I can
finally meet my goal to publish meaningful content on a regular basis :)&lt;/p&gt;</summary><category term="blogging"></category><category term="python"></category></entry></feed>